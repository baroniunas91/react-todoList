{"version":3,"sources":["components/todolist.jsx","components/todo.jsx","components/todos.jsx","App.js","serviceWorker.js","index.js"],"names":["TodoList","props","changeUserInput","event","setState","target","name","value","handleSubmit","preventDefault","onSubmit","id","shortid","generate","userInput","state","complete","list","Fragment","className","this","onChange","placeholder","onClick","type","Component","style","textDecoration","todo","toogleComplete","onDelete","Todos","todos","todoToShow","toogleAllComplete","addTodo","map","updateTodoToShow","string","handleDeleteTodo","filter","removeAllTodosThatAreCompleted","key","length","some","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.eba4ccc0.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport shortid from \"shortid\";\r\n\r\nclass TodoList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      userInput: \"\",\r\n      list: [],\r\n      id: 0,\r\n    };\r\n  }\r\n\r\n  changeUserInput = (event) => {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n  };\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    this.props.onSubmit({\r\n      id: shortid.generate(),\r\n      userInput: this.state.userInput,\r\n      complete: false,\r\n    });\r\n    this.setState({\r\n      userInput: \"\",\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <h1 className=\"title\">Your todo list</h1>\r\n        <form className=\"inputForm\" onSubmit={this.handleSubmit}>\r\n          <input\r\n            name=\"userInput\"\r\n            value={this.state.userInput}\r\n            onChange={this.changeUserInput}\r\n            placeholder=\"What do you need to do?\"\r\n          ></input>\r\n          <button\r\n            className=\"btn btn-primary btn-sm\"\r\n            onClick={this.handleSubmit}\r\n            type=\"submit\"\r\n          >\r\n            Add\r\n          </button>\r\n        </form>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoList;\r\n","import React from \"react\";\r\n\r\nexport default (props) => (\r\n  <div className=\"todo\">\r\n    <div\r\n      className=\"todoText\"\r\n      style={{ textDecoration: props.todo.complete ? \"line-through\" : \"\" }}\r\n      onClick={props.toogleComplete}\r\n    >\r\n      {props.todo.userInput}\r\n    </div>\r\n    <button className=\"btn btn-danger btn-sm\" onClick={props.onDelete}>\r\n      Delete\r\n    </button>\r\n  </div>\r\n);\r\n","import React, { Component } from \"react\";\r\nimport TodoList from \"./todolist\";\r\nimport Todo from \"./todo\";\r\n\r\nclass Todos extends Component {\r\n  state = { todos: [], todoToShow: \"all\", toogleAllComplete: true };\r\n\r\n  addTodo = (todo) => {\r\n    this.setState((state) => ({ todos: [todo, ...state.todos] }));\r\n  };\r\n\r\n  toogleComplete = (id) => {\r\n    this.setState((state) => ({\r\n      todos: state.todos.map((todo) => {\r\n        if (todo.id === id) {\r\n          return {\r\n            ...todo,\r\n            complete: !todo.complete,\r\n          };\r\n        } else {\r\n          return todo;\r\n        }\r\n      }),\r\n    }));\r\n  };\r\n\r\n  updateTodoToShow = (string) => {\r\n    this.setState({\r\n      todoToShow: string,\r\n    });\r\n  };\r\n\r\n  handleDeleteTodo = (id) => {\r\n    this.setState((state) => ({\r\n      todos: state.todos.filter((todo) => todo.id !== id),\r\n    }));\r\n  };\r\n\r\n  removeAllTodosThatAreCompleted = (id) => {\r\n    this.setState((state) => ({\r\n      todos: state.todos.filter((todo) => !todo.complete),\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    let todos = [];\r\n\r\n    if (this.state.todoToShow === \"all\") {\r\n      todos = this.state.todos;\r\n    } else if (this.state.todoToShow === \"active\") {\r\n      todos = this.state.todos.filter((todo) => !todo.complete);\r\n    } else if (this.state.todoToShow === \"complete\") {\r\n      todos = this.state.todos.filter((todo) => todo.complete);\r\n    }\r\n    return (\r\n      <React.Fragment>\r\n        <div>\r\n          <TodoList onSubmit={this.addTodo} />\r\n          {todos.map((todo) => (\r\n            <Todo\r\n              key={todo.id}\r\n              toogleComplete={() => this.toogleComplete(todo.id)}\r\n              todo={todo}\r\n              onDelete={() => this.handleDeleteTodo(todo.id)}\r\n            />\r\n          ))}\r\n        </div>\r\n        <div className=\"todosLeft\">\r\n          todos left: {this.state.todos.filter((todo) => !todo.complete).length}\r\n        </div>\r\n        <div className=\"action\">\r\n          <button\r\n            className=\"btn btn-warning btn-sm m-1\"\r\n            onClick={() => this.updateTodoToShow(\"all\")}\r\n          >\r\n            All\r\n          </button>\r\n          <button\r\n            className=\"btn btn-warning btn-sm m-1\"\r\n            onClick={() => this.updateTodoToShow(\"active\")}\r\n          >\r\n            Active\r\n          </button>\r\n          <button\r\n            className=\"btn btn-warning btn-sm m-1\"\r\n            onClick={() => this.updateTodoToShow(\"complete\")}\r\n          >\r\n            Complete\r\n          </button>\r\n        </div>\r\n        <div className=\"actionGlobal\">\r\n          {this.state.todos.some((todo) => todo.complete) ? (\r\n            <button\r\n              className=\"btn btn-danger btn-sm m-1\"\r\n              onClick={this.removeAllTodosThatAreCompleted}\r\n            >\r\n              Remove all complete todos\r\n            </button>\r\n          ) : null}\r\n          <button\r\n            className=\"btn btn-success btn-sm m-1\"\r\n            onClick={() =>\r\n              this.setState((state) => ({\r\n                todos: state.todos.map((todo) => ({\r\n                  ...todo,\r\n                  complete: state.toogleAllComplete,\r\n                })),\r\n                toogleAllComplete: !state.toogleAllComplete,\r\n              }))\r\n            }\r\n          >\r\n            Toogle all complete: {`${this.state.toogleAllComplete}`}\r\n          </button>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Todos;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Todos from \"./components/todos\";\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Todos />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}